@page "/"
@using FishMinder.Client.Models
@using FishMinder.Client.Services
@inject IFishingTripService FishingTripService
@inject ISpeciesCountService SpeciesCountService
@inject IJSRuntime JSRuntime

<PageTitle>FishMinder Dashboard</PageTitle>

<div class="dashboard">
    <div class="welcome-section">
        <h1 class="dashboard-title">🎣 Welcome to FishMinder</h1>
        <p class="dashboard-subtitle">Track your catches, manage limits, and make every fishing trip count!</p>
    </div>

    <div class="dashboard-grid">
        <InfoCard Title="Current Trip" Icon="🚤" Size="InfoCard.CardSize.Large">
            <ChildContent>
                <div class="trip-info">
                    @if (currentTrip == null)
                    {
                        <p class="trip-status">No active trip</p>
                        <p class="trip-detail">Start a new fishing trip to begin tracking catches</p>
                    }
                    else
                    {
                        <p class="trip-status">@currentTrip.Name</p>
                        <p class="trip-detail">Started @currentTrip.StartTime.ToString("MMM dd, yyyy HH:mm")</p>
                        <p class="trip-detail">@currentTrip.Anglers.Count(a => a.IsActive) anglers, @currentTrip.Catches.Count catches</p>
                    }
                </div>
            </ChildContent>
            <FooterActions>
                @if (currentTrip == null)
                {
                    <TouchButton Text="Start Trip" Icon="▶️" Variant="TouchButton.ButtonVariant.Success"
                               Size="TouchButton.ButtonSize.Large" OnClick="@StartNewTrip" />
                }
                else
                {
                    <TouchButton Text="End Trip" Icon="⏹️" Variant="TouchButton.ButtonVariant.Warning"
                               Size="TouchButton.ButtonSize.Large" OnClick="@EndCurrentTrip" />
                }
            </FooterActions>
        </InfoCard>

        <InfoCard Title="Quick Stats" Icon="📊">
            <ChildContent>
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">@(currentTrip?.TotalCatches ?? 0)</div>
                        <div class="stat-label">Total Catches</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@tripStats.UniqueSpecies</div>
                        <div class="stat-label">Species</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@(currentTrip?.Anglers.Count(a => a.IsActive) ?? 0)</div>
                        <div class="stat-label">Anglers</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@totalTrips</div>
                        <div class="stat-label">Trips</div>
                    </div>
                </div>
            </ChildContent>
        </InfoCard>

        <InfoCard Title="Quick Actions" Icon="⚡">
            <ChildContent>
                <div class="action-buttons">
                    <TouchButton Text="Add Catch" Icon="🎣" Variant="TouchButton.ButtonVariant.Primary"
                               Size="TouchButton.ButtonSize.Large" OnClick="@(() => NavigateToPage("/catch"))" />
                    <TouchButton Text="Manage Anglers" Icon="👥" Variant="TouchButton.ButtonVariant.Secondary"
                               Size="TouchButton.ButtonSize.Large" OnClick="@(() => NavigateToPage("/anglers"))" />
                    <TouchButton Text="View Species" Icon="🐟" Variant="TouchButton.ButtonVariant.Info"
                               Size="TouchButton.ButtonSize.Large" OnClick="@(() => NavigateToPage("/species"))" />
                </div>
            </ChildContent>
        </InfoCard>

        <InfoCard Title="Recent Activity" Icon="📝">
            <ChildContent>
                <div class="activity-list">
                    <p class="no-activity">No recent activity</p>
                    <p class="activity-hint">Start fishing to see your catches here!</p>
                </div>
            </ChildContent>
        </InfoCard>
    </div>
</div>

@code {
    private FishingTrip? currentTrip;
    private bool isLoading = false;
    private TripSpeciesStatistics tripStats = new();
    private int totalTrips = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentTrip();
        await LoadStatistics();
    }

    private async Task LoadCurrentTrip()
    {
        try
        {
            currentTrip = await FishingTripService.GetCurrentTripAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowError($"Failed to load trip data: {ex.Message}");
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            if (currentTrip != null)
            {
                tripStats = await SpeciesCountService.GetTripSpeciesStatisticsAsync();
            }

            // Load total trips count
            var allTrips = await FishingTripService.GetTripsOrderedByDateAsync();
            totalTrips = allTrips.Count();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ShowError($"Failed to load statistics: {ex.Message}");
        }
    }

    private async Task StartNewTrip()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            var tripName = $"Fishing Trip - {DateTime.Now:MMM dd, yyyy}";
            currentTrip = await FishingTripService.StartNewTripAsync(tripName);

            await ShowSuccess("New fishing trip started! You can now add anglers.");
        }
        catch (Exception ex)
        {
            await ShowError($"Failed to start trip: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task EndCurrentTrip()
    {
        if (isLoading) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to end this trip? This action cannot be undone.");
        if (!confirmed) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            await FishingTripService.EndCurrentTripAsync();
            currentTrip = null;

            await ShowSuccess("Trip ended successfully!");
        }
        catch (Exception ex)
        {
            await ShowError($"Failed to end trip: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShowError(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Error: {message}");
    }

    private async Task ShowSuccess(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }

    private async Task NavigateToPage(string url)
    {
        await JSRuntime.InvokeVoidAsync("window.location.href", url);
    }
}
